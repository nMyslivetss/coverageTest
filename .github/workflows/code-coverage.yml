name: Code Coverage Report

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    name: Run Coverage Analysis
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install xUnit manually
        run: |
          nuget install xunit -Version 2.6.6 -OutputDirectory packages
          nuget install xunit.abstractions -Version 2.0.3 -OutputDirectory packages
          nuget install xunit.extensibility.core -Version 2.6.6 -OutputDirectory packages
          nuget install xunit.extensibility.execution -Version 2.6.6 -OutputDirectory packages

      - name: Restore NuGet packages (for non-SDK style)
        run: nuget restore CoverageDemo.sln
      
      - name: Build Solution
        run: dotnet build CoverageDemo.sln --configuration Debug /p:DebugType=Full /p:DebugSymbols=true

      - name: Install tools
        run: |
          dotnet new tool-manifest
          dotnet tool install coverlet.console
          dotnet tool install dotnet-reportgenerator-globaltool

      - name: Install xUnit Console Runner
        run: |
          nuget install xunit.runner.console -Version 2.4.1 -OutputDirectory tools


      - name: Run Coverlet Coverage
        run: |
          dotnet tool run coverlet "Chipply.BusinessLogic.Tests/bin/Debug/Chipply.BusinessLogic.Tests.dll" --target "tools/xunit.runner.console.2.4.1/tools/net472/xunit.console.exe" --targetargs "Chipply.BusinessLogic.Tests/bin/Debug/Chipply.BusinessLogic.Tests.dll" --format cobertura --output "TestResults/coverage/coverage.cobertura.xml" --include "[Chipply.BusinessLogic*]*" --exclude "[*.Tests]*,[System.*]*,[Microsoft.*]*,[xunit.*]*,[MSTest.*]*"

      - name: Generate HTML Report
        run: |
          dotnet tool run reportgenerator -reports:"TestResults/coverage/coverage.cobertura.xml" -targetdir:"TestResults/coverage-report" -reporttypes:"Html;HtmlSummary;HtmlInline_AzurePipelines;Cobertura;Badges" -sourcedirs:"${{ github.workspace }}" -assemblyfilters:"+Chipply.BusinessLogic*" -classfilters:"-*.Tests" -verbosity:Info

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: TestResults/coverage-report

      - name: Add Coverage Summary
        if: always()
        shell: pwsh
        run: |
          Write-Output "## üßæ Code Quality Summary" >> $env:GITHUB_STEP_SUMMARY
          Write-Output "" >> $env:GITHUB_STEP_SUMMARY

          if (Test-Path "TestResults/TestResults.xml") {
            [xml]$xml = Get-Content "TestResults/TestResults.xml"
            $assembly = $xml.assemblies.assembly
            $passed = $assembly.passed
            $failed = $assembly.failed
            $skipped = $assembly.skipped
            $time = $assembly.time
          }

          Add-Content $env:GITHUB_STEP_SUMMARY "### ‚úÖ Test Results"
          Add-Content $env:GITHUB_STEP_SUMMARY "| Metric | Value |"
          Add-Content $env:GITHUB_STEP_SUMMARY "|:--|:--|"
          Add-Content $env:GITHUB_STEP_SUMMARY "| **Passed** | üü¢ $($passed) |"
          Add-Content $env:GITHUB_STEP_SUMMARY "| **Failed** | üî¥ $($failed) |"
          Add-Content $env:GITHUB_STEP_SUMMARY "| **Skipped** | ‚ö™ $($skipped) |"
          Add-Content $env:GITHUB_STEP_SUMMARY "| **Execution Time** | ‚è± $($time)s |"
          Add-Content $env:GITHUB_STEP_SUMMARY ""

          # --- Parse coverage data ---
          if (Test-Path "TestResults/coverage/coverage.cobertura.xml") {
            [xml]$cov = Get-Content "TestResults/coverage/coverage.cobertura.xml"
            $lineRate = [math]::Round([double]$cov.coverage.'line-rate' * 100, 2)
            $branchRate = [math]::Round([double]$cov.coverage.'branch-rate' * 100, 2)
          }

          Add-Content $env:GITHUB_STEP_SUMMARY "### üìä Code Coverage"
          Add-Content $env:GITHUB_STEP_SUMMARY "| Metric | Value |"
          Add-Content $env:GITHUB_STEP_SUMMARY "|:--|:--|"
          Add-Content $env:GITHUB_STEP_SUMMARY "| **Line Coverage** | $($lineRate)% |"
          Add-Content $env:GITHUB_STEP_SUMMARY "| **Branch Coverage** | $($branchRate)% |"
          Add-Content $env:GITHUB_STEP_SUMMARY ""

          Add-Content $env:GITHUB_STEP_SUMMARY "### üöÄ Artifacts"
          Add-Content $env:GITHUB_STEP_SUMMARY "| Artifact | Description |"
          Add-Content $env:GITHUB_STEP_SUMMARY "|:--|:--|"
          Add-Content $env:GITHUB_STEP_SUMMARY "| üíº coverage-report | Full HTML coverage report |"
          Add-Content $env:GITHUB_STEP_SUMMARY "| üß™ test-results | Raw xUnit results |"
