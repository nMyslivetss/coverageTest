name: Code Coverage Report

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  coverage:
    name: Run Coverage Analysis
    runs-on: windows-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v5
        with:
          fetch-depth: 0

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '8.0.x'
          
      - name: Install xUnit manually
        run: |
          nuget install xunit -Version 2.6.6 -OutputDirectory packages
          nuget install xunit.abstractions -Version 2.0.3 -OutputDirectory packages
          nuget install xunit.extensibility.core -Version 2.6.6 -OutputDirectory packages
          nuget install xunit.extensibility.execution -Version 2.6.6 -OutputDirectory packages

      - name: Restore NuGet packages (for non-SDK style)
        run: nuget restore CoverageDemo.sln
      
      - name: Build Solution
        run: dotnet build CoverageDemo.sln --configuration Debug

      - name: Install tools
        run: |
          dotnet new tool-manifest
          dotnet tool install coverlet.console
          dotnet tool install dotnet-reportgenerator-globaltool

      - name: Install xUnit Console Runner
        run: |
          nuget install xunit.runner.console -Version 2.4.1 -OutputDirectory tools


      - name: Run Coverlet Coverage
        run: |
          dotnet tool run coverlet "Chipply.BusinessLogic.Tests/bin/Debug/Chipply.BusinessLogic.Tests.dll" --target "tools/xunit.runner.console.2.4.1/tools/net472/xunit.console.exe" --targetargs "Chipply.BusinessLogic.Tests/bin/Debug/Chipply.BusinessLogic.Tests.dll" --format cobertura --output "TestResults/coverage/coverage.cobertura.xml" --include "[Chipply.BusinessLogic*]*" --exclude "[*.Tests]*,[System.*]*,[Microsoft.*]*,[xunit.*]*,[MSTest.*]*"

      - name: Generate HTML Report
        run: |
          dotnet tool run reportgenerator -reports:"TestResults/coverage/coverage.cobertura.xml" -targetdir:"TestResults/coverage-report" -reporttypes:"HtmlSummary,Cobertura"

      - name: Upload Coverage Artifact
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: TestResults/coverage-report

      - name: Upload Test Results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: test-results
          path: TestResults/TestResults.xml

      - name: Add Coverage Summary
        if: always()
        shell: bash
        run: |
          echo "## 🧾 Code Quality Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          if [ -f TestResults/TestResults.xml ]; then
            PASSED=$(grep -oP '(?<=<assembly.*passed=")[0-9]+' TestResults/TestResults.xml | head -1)
            FAILED=$(grep -oP '(?<=failed=")[0-9]+' TestResults/TestResults.xml | head -1)
            SKIPPED=$(grep -oP '(?<=skipped=")[0-9]+' TestResults/TestResults.xml | head -1)
            TIME=$(grep -oP '(?<=time=")[0-9.]+' TestResults/TestResults.xml | head -1)
          fi

          echo "### ✅ Test Results" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|:--|:--|" >> $GITHUB_STEP_SUMMARY
          echo "| **Passed** | 🟢 ${PASSED:-0} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Failed** | 🔴 ${FAILED:-0} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Skipped** | ⚪ ${SKIPPED:-0} |" >> $GITHUB_STEP_SUMMARY
          echo "| **Execution Time** | ⏱ ${TIME:-0}s |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          # --- Parse coverage data ---
          LINE=$(grep -oP '(?<=line-rate=")[0-9.]+' TestResults/coverage/coverage.cobertura.xml | head -1)
          BRANCH=$(grep -oP '(?<=branch-rate=")[0-9.]+' TestResults/coverage/coverage.cobertura.xml | head -1)

          echo "### 📊 Code Coverage" >> $GITHUB_STEP_SUMMARY
          echo "| Metric | Value |" >> $GITHUB_STEP_SUMMARY
          echo "|:--|:--|" >> $GITHUB_STEP_SUMMARY
          echo "| **Line Coverage** | $(awk "BEGIN {print ${LINE:-0}*100}")% |" >> $GITHUB_STEP_SUMMARY
          echo "| **Branch Coverage** | $(awk "BEGIN {print ${BRANCH:-0}*100}")% |" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY

          echo "### 🚀 Artifacts" >> $GITHUB_STEP_SUMMARY
          echo "| Artifact | Description |" >> $GITHUB_STEP_SUMMARY
          echo "|:--|:--|" >> $GITHUB_STEP_SUMMARY
          echo "| 💼 coverage-report | Full HTML coverage report |" >> $GITHUB_STEP_SUMMARY
          echo "| 🧪 test-results | Raw xUnit results |" >> $GITHUB_STEP_SUMMARY
          
